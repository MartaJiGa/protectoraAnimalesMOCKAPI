{
	"info": {
		"_postman_id": "a63bc9db-de28-41c5-af1e-467a537f85ea",
		"name": "protectoraAnimalesMOCKAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31555828"
	},
	"item": [
		{
			"name": "Animals",
			"item": [
				{
					"name": "animals-getAnimals-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with elements in it\", () => {\r",
									"    const data = pm.response.json();\r",
									"    pm.expect(data).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"The ID is in all the elements of the list\", () => {\r",
									"    const data = pm.response.json();\r",
									"    data.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\").and.is.not.null;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/animals",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-getAnimal-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"There's an error message in the response\", () => {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"code\");\r",
									"});\r",
									"\r",
									"pm.test(\"Not found part of a message\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"no encontrado\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "animalId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-getAnimalsBySpecies-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All objects of the list must have the species variable value\", () => {\r",
									"    const species = pm.variables.get(\"species\");\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    pm.expect(species).to.be.a(\"string\").and.not.empty;\r",
									"\r",
									"    data.forEach(item => {\r",
									"        pm.expect(item.species.toLowerCase()).to.equal(species.toLowerCase());\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Todos los elementos tienen un price mayor o igual a 0\", () => {\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    data.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"price\");\r",
									"        pm.expect(item.price).to.be.a(\"number\").and.at.least(0);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/animals?species={{species}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"animals"
							],
							"query": [
								{
									"key": "species",
									"value": "{{species}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-postAnimals-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the right structure\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"age\");\r",
									"    pm.expect(pm.response.text()).to.include(\"breed\");\r",
									"    pm.expect(pm.response.text()).to.include(\"species\");\r",
									"});\r",
									"\r",
									"pm.test(\"Value is in valid list\", () => {\r",
									"  pm.expect(pm.response.json().species)\r",
									"    .to.be.oneOf([\"Perro\", \"Gato\", \"Hurón\", \"Conejo\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Coco\",\r\n    \"species\": \"Perro\",\r\n    \"age\": 4,\r\n    \"breed\": \"Chihuahua\",\r\n    \"size\": \"Pequeño\",\r\n    \"neutered\": true,\r\n    \"price\": 148.95,\r\n    \"description\": \"Simpático, enérgico y le gusta solo la comida blanda.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId/animals",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId",
								"animals"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-postAnimals-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\",  () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"The message should have text between 3 and 50 caracteres and only having letters and spaces\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"letras y espacios\");\r",
									"});\r",
									"\r",
									"pm.test(\"The code should be 400 in the response body\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Coco1234\",\r\n    \"species\": \"Perro\",\r\n    \"age\": 4,\r\n    \"breed\": \"Chihuahua\",\r\n    \"size\": \"Pequeño\",\r\n    \"neutered\": true,\r\n    \"price\": 148.95,\r\n    \"description\": \"Simpático, enérgico y le gusta solo la comida blanda.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId/animals",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId",
								"animals"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-postAnimals-500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"Server Error\");\r",
									"});\r",
									"\r",
									"pm.test(\"The words 'servidor' or 'interno' exist in the error message\", () => {\r",
									"    const message = pm.response.json().message.toLowerCase();\r",
									"    pm.expect(message).to.match(/servidor|interno/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Coco\",\r\n    \"species\": \"Perro\",\r\n    \"age\": 4,\r\n    \"breed\": \"Chihuahua\",\r\n    \"size\": \"Pequeño\",\r\n    \"neutered\": true,\r\n    \"price\": 148.95,\r\n    \"description\": \"Simpático, enérgico y le gusta solo la comida blanda.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId/animals",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId",
								"animals"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-deleteAnimal-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return 204 No Content when deleting an existing animal\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should be empty for 204 No Content\", () => {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "animalId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-deleteAnimal-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response with message 'no encontrado'\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"no encontrado\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code should be 404 in the response body\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "animalId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-deleteAnimal-500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 50ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(50);\r",
									"});\r",
									"\r",
									"pm.test(\"There's an error message in the response\", () => {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "animalId",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-putAnimal-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Value is in valid list\", () => {\r",
									"  pm.expect(pm.response.json().size)\r",
									"    .to.be.oneOf([\"Pequeño\", \"Mediano\", \"Grande\"]);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.incorporationDate).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.species).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.age).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.breed).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.size).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.neutered).to.be.a(\"boolean\");\r",
									"  pm.expect(jsonData.adopted).to.be.a(\"boolean\");\r",
									"  pm.expect(jsonData.price).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.description).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.locationId).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.locationCity).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Petra\",\r\n    \"species\": \"Gato\",\r\n    \"age\": 12,\r\n    \"breed\": \"Azul Ruso\",\r\n    \"size\": \"Mediano\",\r\n    \"neutered\": false,\r\n    \"adopted\": false,\r\n    \"price\": 186.49,\r\n    \"description\": \"Le gusta estar con otros gatos y perros, pero no le gustan mucho los niños.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "animalId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-putAnimal-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message should explain valid species options\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Perro\").and.to.include(\"Gato\").and.to.include(\"Hurón\").and.to.include(\"Conejo\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code should be 400 in the response body\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Petra\",\r\n    \"species\": \"Caballo\",\r\n    \"age\": 12,\r\n    \"breed\": \"Azul Ruso\",\r\n    \"size\": \"Mediano\",\r\n    \"neutered\": false,\r\n    \"adopted\": false,\r\n    \"price\": 186.49,\r\n    \"description\": \"Le gusta estar con otros gatos y perros, pero no le gustan mucho los niños.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "animalId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-putAnimal-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message should contain the specified location ID\", () => {\r",
									"    const locationId = pm.variables.get(\"locationId\");\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(locationId);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should contain a 404 error code\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId",
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "{{locationId}}"
								},
								{
									"key": "animalId",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-patchAnimal-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Value is in valid list\", () => {\r",
									"  pm.expect(pm.response.json().adopted).to.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"The answer is only one object\", () => {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/animal/:animalId/return",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"animal",
								":animalId",
								"return"
							],
							"variable": [
								{
									"key": "animalId",
									"value": "13"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-patchAnimal-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/animal/:animalId/return",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"animal",
								":animalId",
								"return"
							],
							"variable": [
								{
									"key": "animalId",
									"value": "14"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "animals-patchAnimal-500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"The response has JSON format\", () => {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.have.header(\"Content-Type\", 'application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"There's an error message in the response\", () => {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/animal/:animalId/return",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"animal",
								":animalId",
								"return"
							],
							"variable": [
								{
									"key": "animalId",
									"value": "17"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "users-getUser-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain the expected user fields\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"surname\");\r",
									"    pm.expect(jsonData).to.have.property(\"dateOfBirth\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"});\r",
									"\r",
									"pm.test(\"Username should match expected format\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.match(/^[a-zA-Z0-9_]+$/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-getUsersByName&Surname-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be an array with at least one user\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"All users should match the requested name and surname\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(user => {\r",
									"        pm.expect(user.name).to.eql(\"Pedro\");\r",
									"        pm.expect(user.surname).to.eql(\"Roca\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/users?name=Pedro&surname=Roca",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "name",
									"value": "Pedro"
								},
								{
									"key": "surname",
									"value": "Roca"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-getUsersWithAdoptionsAndDonations-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be an array with at least one user\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Each user should include expected fields\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(user => {\r",
									"        pm.expect(user).to.have.all.keys(\"id\", \"username\", \"name\", \"surname\", \"dateOfBirth\", \"email\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/users?includeAdoptionsAndDonations=true",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "includeAdoptionsAndDonations",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-postUsers-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Email and name are correctly set\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"pedroPicapiedra@ejemplo.com\");\r",
									"    pm.expect(jsonData.name).to.eql(\"Pedro\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"PedroPicapiedra3\",\r\n    \"name\": \"Pedro\",\r\n    \"surname\": \"Roca\",\r\n    \"dateOfBirth\": \"1989-04-21\",\r\n    \"email\": \"pedroPicapiedra@ejemplo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/users",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "users-postUsers-400-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates name length issue\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"entre 3 y 30 caracteres\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is 400 in response body\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"PedroPicapiedra3\",\r\n    \"name\": \"\",\r\n    \"surname\": \"Roca\",\r\n    \"dateOfBirth\": \"1989-04-21\",\r\n    \"email\": \"pedroPicapiedra@ejemplo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/users",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "users-postUsers-400-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates invalid email\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"correo válida\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body includes code 400\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"PedroPicapiedra3\",\r\n    \"name\": \"Pedro\",\r\n    \"surname\": \"Roca\",\r\n    \"dateOfBirth\": \"1989-04-21\",\r\n    \"email\": \"emailprueba@email\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/users",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "users-deleteUser-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be empty\", () => {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-deleteUser-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message includes user ID\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"24\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes error code 404\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "24"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-deleteUser-500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes internal server error message\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.match(/error interno/i);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is 500\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-putUser-ok-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains all required fields\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\", 1);\r",
									"    pm.expect(jsonData).to.have.property(\"username\", \"PedroPicapiedra6\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\", \"Pedro\");\r",
									"    pm.expect(jsonData).to.have.property(\"surname\", \"Roca\");\r",
									"    pm.expect(jsonData).to.have.property(\"dateOfBirth\", \"1989-04-21\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\", \"pedroPicapiedra@ejemplo.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"Username length is at least 3 characters\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username.length).to.be.at.least(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 6,\r\n    \"username\": \"Vilma565\",\r\n    \"name\": \"Vilma\",\r\n    \"surname\": \"Roca\",\r\n    \"dateOfBirth\": \"1993-09-25\",\r\n    \"email\": \"vilma565@ejemplo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-putUser-ok-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the right structure\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"username\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"surname\");\r",
									"    pm.expect(pm.response.text()).to.include(\"dateOfBirth\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"});\r",
									"\r",
									"pm.test(\"Email is a valid string\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 6,\r\n    \"username\": \"Vilma565\",\r\n    \"name\": \"Vilma\",\r\n    \"surname\": \"Roca\",\r\n    \"dateOfBirth\": \"1993-09-25\",\r\n    \"email\": \"vilma565@ejemplo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-putUser-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error code 400\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates invalid birth date\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.match(/fecha de nacimiento debe ser en el pasado/i);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 6,\r\n    \"username\": \"Vilma565\",\r\n    \"name\": \"Vilma\",\r\n    \"surname\": \"Roca\",\r\n    \"dateOfBirth\": \"2084-11-20\",\r\n    \"email\": \"vilma565@ejemplo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "26"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-patchUser-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains updated email\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"email\", \"lunaaa@ejemplo.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"Email format is valid\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"lunaaa@ejemplo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/user/:userId/email",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								":userId",
								"email"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-patchUser-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains proper error message\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Debe proporcionar una dirección de correo válida\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is 400\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"emailEjemplo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/user/:userId/email",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								":userId",
								"email"
							],
							"variable": [
								{
									"key": "userId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-patchUser-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains proper error message\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Usuario no encontrado.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is 404\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"lunaaa@ejemplo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/user/:userId/email",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								":userId",
								"email"
							],
							"variable": [
								{
									"key": "userId",
									"value": "8"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Locations",
			"item": [
				{
					"name": "locations-getLocations-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", () => {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected fields in first location\", () => {\r",
									"    const loc = pm.response.json()[0];\r",
									"    pm.expect(loc).to.have.property(\"id\");\r",
									"    pm.expect(loc).to.have.property(\"mainSite\");\r",
									"    pm.expect(loc).to.have.property(\"address\");\r",
									"    pm.expect(loc).to.have.property(\"zipCode\");\r",
									"    pm.expect(loc).to.have.property(\"city\");\r",
									"    pm.expect(loc).to.have.property(\"description\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/locations",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-getLocationsByZipCode-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error message about no locations\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 404);\r",
									"    pm.expect(jsonData.message).to.include(\"No se encontraron ubicaciones con el código postal 29004\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/locations?zipCode=29004",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"locations"
							],
							"query": [
								{
									"key": "zipCode",
									"value": "29004"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-getAnimalsByLocationId-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error message about no animals\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 404);\r",
									"    pm.expect(jsonData.message).to.include(\"No se encontraron animales para esa ubicación.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId/animals",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId",
								"animals"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-postLocations-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains new location with id\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.address).to.eql(\"Avenida de Murcia, 75, 2.º G\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mainSite\": true,\r\n    \"address\": \"Avenida de Murcia, 75, 2.º G\",\r\n    \"zipCode\": \"17260\",\r\n    \"city\": \"Gijón\",\r\n    \"description\": \"Sede secundaria de la protectora.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/locations",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-postLocations-400-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error about address\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 400);\r",
									"    pm.expect(jsonData.message).to.include(\"La dirección no puede estar vacía\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mainSite\": true,\r\n    \"zipCode\": \"17260\",\r\n    \"city\": \"Gijón\",\r\n    \"description\": \"Sede secundaria de la protectora.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/locations",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-postLocations-400-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error about zipCode\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 400);\r",
									"    pm.expect(jsonData.message).to.include(\"El código postal debe ser válido en España (01000 a 52999)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mainSite\": true,\r\n    \"address\": \"Avenida de Murcia, 75, 2.º G\",\r\n    \"zipCode\": \"53000\",\r\n    \"city\": \"Gijón\",\r\n    \"description\": \"Sede secundaria de la protectora.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/locations",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-deleteLocation-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", () => {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"No Content-Type header for 204\", () => {\r",
									"    pm.response.to.not.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-deleteLocation-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message should mention 'not found'\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"no encontrada\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-deleteLocation-500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains internal server error\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 500);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-putLocation-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has Content-Type application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains correct address\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.address).to.eql(\"Avenida de Murcia, 75, 2.º G\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mainSite\": true,\r\n    \"address\": \"Avenida de Murcia, 75, 2.º G\",\r\n    \"zipCode\": \"17260\",\r\n    \"city\": \"Gijón\",\r\n    \"description\": \"Sede principal de la protectora.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-putLocation-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response message indicates invalid city\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"La ciudad solo puede estar compuesta por letras y espacios\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mainSite\": true,\r\n    \"address\": \"Avenida de Murcia, 75, 2.º G\",\r\n    \"zipCode\": \"17260\",\r\n    \"city\": \"Madrid.)\",\r\n    \"description\": \"Sede principal de la protectora.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-putLocation-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response message indicates location not found\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Ubicación con id 32 no encontrada.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mainSite\": true,\r\n    \"address\": \"Avenida de Murcia, 75, 2.º G\",\r\n    \"zipCode\": \"17260\",\r\n    \"city\": \"Gijón\",\r\n    \"description\": \"Sede principal de la protectora.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "32"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-patchLocation-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Location mainSite is true\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.mainSite).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId/mainSite",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId",
								"mainSite"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-patchLocation-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message about already main site\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Esta ubicación ya es la principal, por lo que no necesita cambiar.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId/mainSite",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId",
								"mainSite"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "locations-patchLocation-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message about location not found\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Ubicación con id 8 no encontrada.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/location/:locationId/mainSite",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"location",
								":locationId",
								"mainSite"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "8"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Adoptions",
			"item": [
				{
					"name": "adoptions-getAdoptions-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", () => {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/adoptions",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-getAdoptionsByDateAnimalUser-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON and array\", () => {\r",
									"    pm.response.to.be.json;\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"All adoptions match filter criteria\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(adoption => {\r",
									"        pm.expect(adoption.adoptionDate).to.eql(\"2025-01-14\");\r",
									"        pm.expect(adoption.userId).to.eql(4);\r",
									"        pm.expect(adoption.animalId).to.eql(1);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/adoptions?adoptionDate=2025-01-14&userId=4&animalId=1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoptions"
							],
							"query": [
								{
									"key": "adoptionDate",
									"value": "2025-01-14"
								},
								{
									"key": "userId",
									"value": "4"
								},
								{
									"key": "animalId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-getNextPickups-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON and array\", () => {\r",
									"    pm.response.to.be.json;\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Cada adopción tiene pickUpDate en formato YYYY-MM-DD\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"    \r",
									"    jsonData.forEach(adoption => {\r",
									"        pm.expect(adoption).to.have.property(\"pickUpDate\");\r",
									"        pm.expect(adoption.pickUpDate).to.match(dateRegex);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/adoptions/pickups-next-two-weeks",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoptions",
								"pickups-next-two-weeks"
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-postAdoptions-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid adoption id\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"pickUpTime has format HH:mm\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.pickUpTime).to.match(/^([01]\\d|2[0-3]):([0-5]\\d)$/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"takeAccessories\": true,\r\n    \"pickUpDate\": \"2025-08-24\",\r\n    \"pickUpTime\": \"20:10\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/adoptions/user/:userId/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoptions",
								"user",
								":userId",
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "7"
								},
								{
									"key": "animalId",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-postAdoptions-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes error message about time format\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"hora de recogida\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response code equals 400\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"takeAccessories\": true,\r\n    \"pickUpDate\": \"2025-01-24\",\r\n    \"pickUpTime\": \"25:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/adoptions/user/:userId/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoptions",
								"user",
								":userId",
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "8"
								},
								{
									"key": "animalId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-postAdoptions-500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains Content-Type application/json header\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has message property\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"takeAccessories\": true,\r\n    \"pickUpDate\": \"2025-01-24\",\r\n    \"pickUpTime\": \"21:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/adoptions/user/:userId/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoptions",
								"user",
								":userId",
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "12"
								},
								{
									"key": "animalId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-deleteAdoption-ok-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", () => {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/adoption/:adoptionId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoption",
								":adoptionId"
							],
							"variable": [
								{
									"key": "adoptionId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-deleteAdoption-ok-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"No Content-Type header\", () => {\r",
									"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", () => {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/adoption/:adoptionId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoption",
								":adoptionId"
							],
							"variable": [
								{
									"key": "adoptionId",
									"value": "82"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-deleteAdoption-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error code 404 and message\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 404);\r",
									"    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"no encontrada\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/adoption/:adoptionId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoption",
								":adoptionId"
							],
							"variable": [
								{
									"key": "adoptionId",
									"value": "42"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-putAdoption-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct adoptionId\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct user and animal\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(2);\r",
									"    pm.expect(jsonData.animalId).to.eql(14);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"takeAccessories\": true,\r\n    \"pickUpDate\": \"2025-03-21\",\r\n    \"pickUpTime\": \"15:45\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/adoption/:adoptionId/user/:userId/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoption",
								":adoptionId",
								"user",
								":userId",
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "adoptionId",
									"value": "4"
								},
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "animalId",
									"value": "14"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-putAdoption-400-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message for past pickUpDate\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"La fecha de recogida debe ser en el futuro o la de hoy\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is present\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"takeAccessories\": true,\r\n    \"pickUpDate\": \"2012-04-11\",\r\n    \"pickUpTime\": \"15:45\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/adoption/:adoptionId/user/:userId/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoption",
								":adoptionId",
								"user",
								":userId",
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "adoptionId",
									"value": "6"
								},
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "animalId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-putAdoption-400-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message for empty pickUpTime\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"La hora de recogida no puede estar vacía\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is present\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"takeAccessories\": true,\r\n    \"pickUpDate\": \"2025-03-21\",\r\n    \"pickUpTime\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/adoption/:adoptionId/user/:userId/animal/:animalId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoption",
								":adoptionId",
								"user",
								":userId",
								"animal",
								":animalId"
							],
							"variable": [
								{
									"key": "adoptionId",
									"value": "6"
								},
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "animalId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-patchAdoption-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Adoption updated with correct pickUpDate and pickUpTime\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.pickUpDate).to.eql(\"2025-05-10\");\r",
									"    pm.expect(jsonData.pickUpTime).to.eql(\"15:45\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct adoption ID returned\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(3);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pickUpDate\": \"2025-05-10\",\r\n    \"pickUpTime\": \"15:45\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/adoption/:adoptionId/pickUp",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoption",
								":adoptionId",
								"pickUp"
							],
							"variable": [
								{
									"key": "adoptionId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-patchAdoption-400-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message for missing pickUpDate\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"La fecha de recogida no puede estar vacía\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is 400\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pickUpTime\": \"15:45\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/adoption/:adoptionId/pickUp",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoption",
								":adoptionId",
								"pickUp"
							],
							"variable": [
								{
									"key": "adoptionId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adoptions-patchAdoption-400-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message for invalid pickUpTime format\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"El formato de la hora de recogida no es válido\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is 400\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pickUpDate\": \"2025-03-19\",\r\n    \"pickUpTime\": \"28:82\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/adoption/:adoptionId/pickUp",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"adoption",
								":adoptionId",
								"pickUp"
							],
							"variable": [
								{
									"key": "adoptionId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Donations",
			"item": [
				{
					"name": "donations-getDonations-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check first donation has expected userUsername\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property(\"userUsername\", \"PedroPicapiedra3\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/donations",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donations"
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-getDonation-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct donation ID\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains user details with email\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user).to.have.property(\"email\");\r",
									"    pm.expect(jsonData.user.email).to.eql(\"vilma565@ejemplo.com\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/donation/:donationId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donation",
								":donationId"
							],
							"variable": [
								{
									"key": "donationId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-getDonationsByDonationDate-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct error code\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message contains correct date\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"2025-01-14\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/donations?donationDate=2025-01-14",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donations"
							],
							"query": [
								{
									"key": "donationDate",
									"value": "2025-01-14"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-postDonations-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has new donation ID\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains correct paymentType and userId\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.paymentType).to.eql(\"Tarjeta\");\r",
									"    pm.expect(jsonData.userId).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"quantity\": 120.0,\r\n   \"paymentType\": \"Tarjeta\",\r\n   \"splitPayment\": true,\r\n   \"splitPaymentQuantity\": 6\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/donations/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donations",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-postDonations-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error code 400\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates invalid payment type\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"tipo de pago\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"quantity\": 120.0,\r\n   \"paymentType\": \"Bizum\",\r\n   \"splitPayment\": true,\r\n   \"splitPaymentQuantity\": 6\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/donations/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donations",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-postDonations-500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", () => {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"quantity\": 120.0,\r\n   \"paymentType\": \"Tarjeta\",\r\n   \"splitPayment\": true,\r\n   \"splitPaymentQuantity\": 6\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/donations/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donations",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-deleteDonation-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", () => {\r",
									"    pm.expect(pm.response.text()).to.eql('');\r",
									"});\r",
									"\r",
									"pm.test(\"No Content-Type header present\", () => {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/donation/:donationId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donation",
								":donationId"
							],
							"variable": [
								{
									"key": "donationId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-deleteDonation-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error code 404\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates donation not found\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"no encontrada\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/donation/:donationId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donation",
								":donationId"
							],
							"variable": [
								{
									"key": "donationId",
									"value": "38"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-deleteDonation-500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", () => {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/donation/:donationId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donation",
								":donationId"
							],
							"variable": [
								{
									"key": "donationId",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-putDonation-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct donation id\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has Content-Type application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"quantity\": 50.25,\r\n   \"paymentType\": \"Tarjeta\",\r\n   \"splitPayment\": false,\r\n   \"splitPaymentQuantity\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/donation/:donationId/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donation",
								":donationId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "donationId",
									"value": "3"
								},
								{
									"key": "userId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-putDonation-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is 400\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message about minimum quantity\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"como mínimo de 1\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"quantity\": -2.21,\r\n   \"paymentType\": \"Tarjeta\",\r\n   \"splitPayment\": false,\r\n   \"splitPaymentQuantity\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/donation/:donationId/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donation",
								":donationId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "donationId",
									"value": "8"
								},
								{
									"key": "userId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-putDonation-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is 404\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message about donation not found\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"no encontrada\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"quantity\": 50.25,\r\n   \"paymentType\": \"Tarjeta\",\r\n   \"splitPayment\": false,\r\n   \"splitPaymentQuantity\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/donation/:donationId/user/:userId",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donation",
								":donationId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "donationId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-patchDonation-ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct donation id\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"splitPayment\": true,\r\n   \"splitPaymentQuantity\": 9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/donation/:donationId/splitPayment",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donation",
								":donationId",
								"splitPayment"
							],
							"variable": [
								{
									"key": "donationId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-patchDonation-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is 400\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message about max split payment quantity\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"como máximo de 12\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"splitPayment\": true,\r\n   \"splitPaymentQuantity\": 18\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/donation/:donationId/splitPayment",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donation",
								":donationId",
								"splitPayment"
							],
							"variable": [
								{
									"key": "donationId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "donations-patchDonation-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is 404\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message about donation not found\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"no encontrada\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"splitPayment\": true,\r\n   \"splitPaymentQuantity\": 9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/donation/:donationId/splitPayment",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"donation",
								":donationId",
								"splitPayment"
							],
							"variable": [
								{
									"key": "donationId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "port",
			"value": "8080",
			"type": "string"
		},
		{
			"key": "species",
			"value": "Gato",
			"type": "string"
		},
		{
			"key": "locationId",
			"value": "10",
			"type": "string"
		}
	]
}